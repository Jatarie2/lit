{"version":3,"sources":["Literotica.js","Category.js","Story.js","App.js","serviceWorker.js","index.js"],"names":["Literotica","props","state","categories","this","map","cat","to","pathname","Component","Category","stories","long_title","short_title","includes","match","RegExp","rt","urls","short_titles","long_titles","i","length","getShortTitle","push","category","params","axios","get","then","r","data","setState","filterStories","s","Story","chapter_data","af","bind","bf","cf","toggleVisibility","chapter","page","text","replace","numpages","parseInt","pages","getPageText","author","title","chapterRX","chapters","unique_chapters","forEach","getPages","a","Promise","all","b","d","tmp","concat","story","authorId","getChapters","resolve","e","document","getElementById","target","id","style","display","class","x","onClick","className","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.884b0d7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Literotica extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            categories: [\"bdsm-stories\", \"fetish-stories\", \"gay-sex-stories\", \"group-sex-stories\", \"taboo-sex-stories\", \"lesbian-sex-stories\", \"mind-control\", \"NonConsent-Reluctance-13\", \"transsexuals-crossdressers\"]\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            this.state.categories.map(cat =>\r\n                <div>\r\n                    <Link to={{\r\n                        pathname: \"/c/\" + cat\r\n                    }}> {cat}</Link>\r\n                </div>)\r\n        );\r\n    }\r\n}\r\n\r\nexport default Literotica;","import React, { Component } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { withRouter } from 'react-router';\r\nimport axios from 'axios';\r\n\r\nclass Category extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { stories: null };\r\n    }\r\n\r\n    getShortTitle(long_title) {\r\n        let short_title = long_title;\r\n        if (long_title.includes(\"-ch\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-ch)\", \"gms\"))[0];\r\n        }\r\n        if (long_title.includes(\"-pt\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-pt)\", \"gms\"))[0];\r\n        }\r\n        if (long_title.includes(\"-chapter\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-chapter)\", \"gms\"))[0];\r\n        }\r\n        if (long_title.includes(\"-part\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-part)\", \"gms\"))[0];\r\n        }\r\n        return short_title;\r\n    }\r\n\r\n    filterStories(stories) {\r\n        let rt = []\r\n        let urls = stories;\r\n        let short_titles = [];\r\n        let long_titles = [];\r\n        for (let i = 0; i < stories.length; i++) {\r\n            let titleRX = /(?<=\\/s\\/).+/gms\r\n            let long_title = stories[i].match(titleRX)[0];\r\n            let short_title = this.getShortTitle(long_title);\r\n            if (!short_titles.includes(short_title)) {\r\n                short_titles.push(short_title)\r\n                long_titles.push(long_title)\r\n            }\r\n        }\r\n        for (let i = 0; i < short_titles.length; i++) {\r\n            rt[i] = { \"url\": urls[i], \"short_title\": short_titles[i], \"long_title\": long_titles[i] };\r\n        }\r\n        return rt;\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        let category = this.props.match.params.category\r\n        axios.get(\"https://www.literotica.com/top/\" + category).then(r => {\r\n            let RX = /(?<=href=\")(https:\\/\\/www.literotica.com\\/s\\/[\\w-]+)/gms;\r\n            let stories = r.data.match(RX);\r\n            this.setState({\r\n                stories: this.filterStories(stories)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.stories &&\r\n            this.state.stories.map(s =>\r\n                <div>\r\n                    <Link to={{\r\n                        pathname: \"/s/\" + s.long_title,\r\n                    }}> {s.short_title}</Link>\r\n                </div>)\r\n        )\r\n    }\r\n}\r\n\r\nexport default Category;","import React, { Component } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { withRouter } from 'react-router';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nclass Story extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { chapter_data: [] };\r\n        this.af = this.af.bind(this);\r\n        this.bf = this.bf.bind(this);\r\n        this.cf = this.cf.bind(this);\r\n        this.toggleVisibility = this.toggleVisibility.bind(this);\r\n    }\r\n\r\n    getShortTitle(long_title) {\r\n        let short_title = long_title;\r\n        if (long_title.includes(\"-ch\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-ch)\", \"gms\"))[0];\r\n        }\r\n        if (long_title.includes(\"-pt\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-pt)\", \"gms\"))[0];\r\n        }\r\n        if (long_title.includes(\"-chapter\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-chapter)\", \"gms\"))[0];\r\n        }\r\n        if (long_title.includes(\"-part\")) {\r\n            short_title = long_title.match(new RegExp(\".+(?=-part)\", \"gms\"))[0];\r\n        }\r\n        return short_title;\r\n    }\r\n\r\n    getPageText(chapter, page) {\r\n        return axios.get(chapter + \"?page=\" + page).then(r => {\r\n            let textRX = /(?<=<p>).+?(?=<\\/p>)/gms\r\n            let text = r.data.match(textRX)[1];\r\n            text = text.replace(/<em>/g, \"\");\r\n            text = text.replace(/<\\/em>/g, \"\");\r\n            text = text.replace(/<br\\s\\s\\/>/g, \"\");\r\n            text = text.replace(/<i>/g, \"\");\r\n            text = text.replace(/<u>/g, \"\");\r\n            text = text.replace(/<\\/i>/g, \"\");\r\n            text = text.replace(/<\\/u>/g, \"\");\r\n            return text;\r\n        })\r\n    }\r\n\r\n    getPages(chapter) {\r\n        return axios.get(chapter).then(r => {\r\n            let numpagesRX = /\\d+(?=\\sPages)/gms\r\n            let numpages = parseInt(r.data.match(numpagesRX));\r\n            let pages = [];\r\n            for (let i = 1; i <= numpages; i++) {\r\n                pages.push(this.getPageText(chapter, i));\r\n            }\r\n            return pages;\r\n        })\r\n    }\r\n\r\n    getChapters(author, title) {\r\n        return axios.get(author + \"&page=submissions\").then(r => {\r\n            let chapterRX = new RegExp(`https://www.literotica.com/s/${title}[\\\\w\\\\-]*`, \"gms\");\r\n            let chapters = r.data.match(chapterRX);\r\n            let unique_chapters = [];\r\n            chapters.forEach(chapter => {\r\n                if (!unique_chapters.includes(chapter)) {\r\n                    unique_chapters.push(chapter)\r\n                }\r\n            });\r\n            let chapter_data = [];\r\n            for (let i = 0; i < unique_chapters.length; i++) {\r\n                chapter_data.push(this.getPages(unique_chapters[i]));\r\n            }\r\n            return chapter_data;\r\n        })\r\n    }\r\n\r\n    async af(a) {\r\n        await Promise.all(a).then(b => this.bf(b));\r\n    }\r\n    async bf(b) {\r\n        for (let i = 0; i < b.length; i++) {\r\n            await Promise.all(b[i]).then(d => this.cf(d))\r\n        }\r\n    }\r\n    cf(d) {\r\n        let tmp = this.state.chapter_data.concat(d);\r\n        this.setState({ chapter_data: tmp })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let long_title = this.props.match.params.story;\r\n        let short_title = this.getShortTitle(long_title);\r\n        let story = axios.get(\"https://www.literotica.com/s/\" + long_title).then(r => {\r\n            // let authorRX =/(?<=submissions\">).+?(?=<\\/a>)/gms\r\n            // let author = r.data.match(authorRX)[0];\r\n            let authorIdRX = /https:\\/\\/www.literotica.com\\/stories\\/memberpage.php\\?uid=\\w+/gms\r\n            let authorId = r.data.match(authorIdRX)[0];\r\n            let chapters = this.getChapters(authorId, short_title);\r\n            return chapters;\r\n        })\r\n\r\n        Promise.resolve(story).then(a => this.af(a))\r\n    }\r\n\r\n    toggleVisibility(e) {\r\n        let text = document.getElementById(e.target.id + \"-text\")\r\n        if (text.style.display == \"none\"){\r\n            text.style.display = \"block\"\r\n        }\r\n        else{\r\n            text.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"story-text\">\r\n                {this.state.chapter_data.map((x, i) =>\r\n                    <div class=\"page\" >\r\n                        <div onClick={this.toggleVisibility} id={\"page-\" + i + 1} className={\"page-button\"}>\r\n                            Page {i + 1}\r\n                        </div>\r\n                        <div id={\"page-\" + i + 1 + \"-text\"} style={{display:\"none\"}}>\r\n                            {x}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Story;","import React from 'react';\nimport './App.css';\nimport Literotica from './Literotica'\nimport Category from './Category'\nimport Story from './Story'\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/c/:category\" component={Category} />\n        <Route path=\"/s/:story\" component={Story} />\n        <Route path=\"/\" component={Literotica} />\n\n      </Switch>\n    </Router >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}